name: Capture User Responses

on:
  schedule:
    - cron: '*/5 6-9 * * 1-5'  # Runs every 5 minutes between 6 AM and 9 AM UTC (adjust the time as needed)
  workflow_dispatch:  # Allows manual triggering

jobs:
  capture-responses:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh -y

      - name: Retrieve Thread, DM Channel Info, and Processed Timestamps
        run: |
          git pull  # Pull the latest changes to ensure we get the saved files

          # Ensure both thread_ts.txt and dm_channels.txt exist
          if [ ! -f thread_ts.txt ]; then
            echo "Error: thread_ts.txt not found. Cannot proceed."
            exit 1
          fi
          if [ ! -f dm_channels.txt ]; then
            echo "Error: dm_channels.txt not found. Cannot proceed."
            exit 1
          fi

          # Retrieve the thread_ts from the file
          THREAD_TS=$(cat thread_ts.txt | cut -d '=' -f2)
          if [ -z "$THREAD_TS" ]; then
            echo "Error: THREAD_TS is not set. Cannot proceed."
            exit 1
          fi
          echo "Retrieved THREAD_TS: $THREAD_TS"

          # Ensure the file tracking processed messages exists, create if not
          if [ ! -f processed_timestamps.txt ]; then
            touch processed_timestamps.txt
          fi
          cat processed_timestamps.txt

          # Export THREAD_TS for subsequent steps
          echo "THREAD_TS=$THREAD_TS" >> $GITHUB_ENV

      - name: Poll for User Responses
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          THREAD_TS: ${{ env.THREAD_TS }}
        run: |
          # Function to get the last processed message timestamp for a user
          get_last_processed_timestamp() {
            grep "^$1:" processed_timestamps.txt | cut -d ':' -f2
          }

          # Function to update the processed timestamp for a user
          update_last_processed_timestamp() {
            sed -i "/^$1:/d" processed_timestamps.txt  # Remove any existing entry for the user
            echo "$1:$2" >> processed_timestamps.txt   # Add the new timestamp
          }

          # Iterate over users and their DM channel IDs
          while IFS=: read -r USER DM_CHANNEL_ID; do
            echo "Polling responses for $USER in DM Channel: $DM_CHANNEL_ID"

            # Poll the DM channel for the latest message (waiting for the user's response)
            RESPONSE=$(curl -s -X POST https://slack.com/api/conversations.history \
              -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              -H "Content-type: application/json" \
              --data "{\"channel\":\"$DM_CHANNEL_ID\", \"limit\": 1}")

            # Log the response for debugging
            echo "Full Poll Response for $USER: $RESPONSE"

            # Check if the response is from a bot (contains bot_id)
            BOT_ID=$(echo $RESPONSE | jq -r '.messages[0].bot_id')

            if [[ "$BOT_ID" != "null" ]]; then
              echo "Message is from a bot (bot_id: $BOT_ID), skipping."
              continue
            fi

            # Extract the latest message details
            USER_RESPONSE=$(echo $RESPONSE | jq -r '.messages[0].text')
            USER_ID=$(echo $RESPONSE | jq -r '.messages[0].user')
            RESPONSE_TIMESTAMP=$(echo $RESPONSE | jq -r '.messages[0].ts')

            # Log the extracted response and user ID for debugging
            echo "Extracted Response for $USER: $USER_RESPONSE"
            echo "Extracted USER_ID: $USER_ID"
            echo "Response Timestamp: $RESPONSE_TIMESTAMP"

            # Get the last processed timestamp for this user
            LAST_PROCESSED_TIMESTAMP=$(get_last_processed_timestamp "$USER")
            echo "Last processed timestamp for $USER: $LAST_PROCESSED_TIMESTAMP"

            # Check if the response was sent by the user and is newer than the last processed message
            if [[ "$USER_ID" == "$USER" && "$USER_RESPONSE" != "null" && "$USER_RESPONSE" != "Good morning! Please provide your standup response:" && ( -z "$LAST_PROCESSED_TIMESTAMP" || "$RESPONSE_TIMESTAMP" > "$LAST_PROCESSED_TIMESTAMP" ) ]]; then
              
              # Fetch the user's name using the users.info API
              USER_INFO=$(curl -s -X POST https://slack.com/api/users.info \
                -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                -H "Content-type: application/json" \
                --data "{\"user\":\"$USER_ID\"}")
              
              # Log the entire user info response for debugging
              echo "User Info Response: $USER_INFO"
              
              # Extract the user's real name (or fallback to display name)
              USER_NAME=$(echo $USER_INFO | jq -r '.user.real_name // .user.name')

              echo "Posting $USER_NAME's response to the thread."

              # Post the user response as a reply in the thread under the main message
              POST_RESPONSE=$(curl -s -X POST https://slack.com/api/chat.postMessage \
                -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                -H "Content-type: application/json" \
                --data "{\"channel\":\"#test-bot\", \"text\":\"@$USER_NAME's standup summary:\n$USER_RESPONSE\", \"thread_ts\":\"$THREAD_TS\"}")

              # Log the response from posting the message
              echo "Post Response: $POST_RESPONSE"

              # Check for errors in posting
              POST_OK=$(echo $POST_RESPONSE | jq -r '.ok')
              if [[ "$POST_OK" != "true" ]]; then
                echo "Error posting response to thread: $POST_RESPONSE"
              else
                echo "Successfully posted response to thread."
                # Update the last processed timestamp for this user
                update_last_processed_timestamp "$USER" "$RESPONSE_TIMESTAMP"
              fi
            else
              echo "No new valid response from $USER yet, or the response is from the bot."
            fi
          done < dm_channels.txt

      - name: Save Processed Timestamps with Git Config
        run: |
          # Set Git configuration for committing changes
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

          # Add and commit the updated processed_timestamps.txt
          git add processed_timestamps.txt
          git commit -m "Update processed timestamps for user responses"
          git push
