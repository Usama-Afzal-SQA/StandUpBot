name: Send Standup Prompt

on:
  schedule:
    - cron: '0 6 * * 1-5'  # Adjust the time as needed
  workflow_dispatch:  # Allows manual triggering

jobs:
  send-standup-prompt:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh -y

      - name: Post Main Message in Channel
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          # Post the standup message to the #test-bot channel
          RESPONSE=$(curl -s -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-type: application/json" \
            --data "{\"channel\":\"#stand-up-meeting\", \"text\":\"@here 📝 Today’s standup summary for $(date +'%Y-%m-%d') has started. Please provide your response to Goally Standup Bot!\"}")

          # Extract the thread_ts (timestamp of the main message)
          THREAD_TS=$(echo $RESPONSE | jq -r '.ts')

          # Log the extracted thread_ts for debugging purposes
          echo "Extracted THREAD_TS: $THREAD_TS"

          # Save the thread_ts in a file so it can be used by the next workflow
          echo "THREAD_TS=$THREAD_TS" > thread_ts.txt

      - name: Get DM Channel for Each User
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          USERS=("U066LTEPJF7" "U05C0U50HJS" "U03JSUCLAF3" "U07T6NHS2UR" "U042L58JY0L" "U05EDCGG3BM" "U03JSUS7Z4Z" "U049S2V1QUW")  # Add more users as needed
 
          for USER in "${USERS[@]}"; do
            # Open a DM channel with the user
            DM_CHANNEL_RESPONSE=$(curl -s -X POST https://slack.com/api/conversations.open \
              -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              -H "Content-type: application/json" \
              --data "{\"users\":\"$USER\"}")

            # Extract the DM channel ID
            DM_CHANNEL_ID=$(echo $DM_CHANNEL_RESPONSE | jq -r '.channel.id')

            # Save the DM channel ID to a file for future workflows
            echo "$USER:$DM_CHANNEL_ID" >> dm_channels.txt

            # Send a DM to the user asking for standup information
            curl -s -X POST https://slack.com/api/chat.postMessage \
              -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              -H "Content-type: application/json" \
              --data "{\"channel\":\"$DM_CHANNEL_ID\", \"text\":\"Good morning! Please provide your standup response:\n\n\nYESTERDAY'S TASKS:\n\nTODAY TASKS:\n\nANY BLOCKERS?\"}"
          done

      - name: Save Files (Thread TS and DM Channels) for Later Use
        run: |
          # Commit both the thread_ts.txt and dm_channels.txt files so they can be used by the response capturing workflow
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add thread_ts.txt dm_channels.txt
          git commit -m "Save THREAD_TS and DM channels for response capture"
          git push
