name: Daily Standup

on:
  schedule:
    # Runs every weekday (Monday to Friday) at 9 AM UTC
    - cron: '0 6 * * 1-5'
  workflow_dispatch: # Allows manual triggering

jobs:
  send-standup-prompt:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh -y

      - name: Post Main Message in Channel
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          # Post main message to #stand-up-meeting channel
          RESPONSE=$(curl -s -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-type: application/json" \
            --data '{"channel":"#stand-up-meeting", "text":"📝 Today’s standup summary for $(date +'%Y-%m-%d') has started. Please wait for your direct message and provide your response!"}')

          # Extract thread timestamp for future reference
          THREAD_TS=$(echo $RESPONSE | jq -r '.ts')
          
          # Save thread_ts for later use (to append replies)
          echo "THREAD_TS=$THREAD_TS" >> $GITHUB_ENV

      - name: Get DM Channel for Each User
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          USERS=("U066LTEPJF7")  # List of Slack users
          
          for USER in "${USERS[@]}"; do
            # Open a DM channel with the user
            DM_CHANNEL_RESPONSE=$(curl -s -X POST https://slack.com/api/conversations.open \
              -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              -H "Content-type: application/json" \
              --data "{\"users\":\"$USER\"}")

            # Extract the DM channel ID
            DM_CHANNEL_ID=$(echo $DM_CHANNEL_RESPONSE | jq -r '.channel.id')

            # Save the DM channel ID to a file
            echo "$USER:$DM_CHANNEL_ID" >> dm_channels.txt

            # Send a DM to each user asking for standup information
            curl -s -X POST https://slack.com/api/chat.postMessage \
              -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              -H "Content-type: application/json" \
              --data "{\"channel\":\"$DM_CHANNEL_ID\", \"text\":\"Good morning! Please provide your standup response:\n\nYesterday Tasks:\nToday Tasks:\nAny Blockers?\"}"
          done

      - name: Poll for User Responses and Post to Thread
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          THREAD_TS: ${{ env.THREAD_TS }}
        run: |
          # Iterate over users and their DM channel IDs
          while IFS=: read -r USER DM_CHANNEL_ID; do
            # Poll the DM channel for the latest message
            RESPONSE=$(curl -s -X POST https://slack.com/api/conversations.history \
              -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              -H "Content-type: application/json" \
              --data "{\"channel\":\"$DM_CHANNEL_ID\", \"limit\": 1}")

            # Extract the latest message from the user's DM
            USER_RESPONSE=$(echo $RESPONSE | jq -r '.messages[0].text')

            # Check if the response is valid
            if [[ "$USER_RESPONSE" != "null" ]]; then
              # Post the user response as a reply in the thread under the main message
              curl -s -X POST https://slack.com/api/chat.postMessage \
                -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                -H "Content-type: application/json" \
                --data "{\"channel\":\"#stand-up-meeting\", \"text\":\"@$USER's standup summary:\n$USER_RESPONSE\", \"thread_ts\":\"$THREAD_TS\"}"
            fi
          done < dm_channels.txt
