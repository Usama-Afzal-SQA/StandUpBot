name: Aggregate Standup Reports

on:
  schedule:
    # Runs every weekday (Monday to Friday) at 10:30 AM PST (5:30 AM UTC)
    # - cron: '30 5 * * 1-5' I have commented this job as this simple workflow is no longer usable, as now we are using exteded version.
  workflow_dispatch:

jobs:
  aggregate-standups:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install gh jq -y

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Ensure Label Exists
        run: |
          # Check if the label exists, create it if it does not
          gh label list | grep -q "standup-summary" || gh label create "standup-summary" --color "EAB8D1" --description "Summary of standup issues"

      - name: Fetch Standup Issues
        run: |
          gh issue list --label standup --state open --limit 10 > standup_issues.txt

      - name: Create Summary Issue
        run: |
          issue_body="**Standup Summary for $(date +'%Y-%m-%d')**\n\n"
          while read -r line; do
            issue_number=$(echo "$line" | awk '{print $1}')
            issue_title=$(echo "$line" | cut -d' ' -f2-)
            issue_body="$issue_body- [#$issue_number] $issue_title\n"
          done < standup_issues.txt
          
          gh issue create --title "Standup Summary - $(date +'%Y-%m-%d')" --body "$issue_body" --label "standup-summary"

      - name: Close Standup Issues
        if: success()
        run: |
          while read -r line; do
            issue_number=$(echo "$line" | awk '{print $1}')
            gh issue close $issue_number
          done < standup_issues.txt

      - name: Send Standup Summary to Slack
        id: send_slack
        run: |
          # Create the message with the date
          SLACK_MESSAGE="📝 *Standup Summary for $(date +'%Y-%m-%d')* has been created."
          
          # Post the standup summary using Slack's Web API and capture the response
          RESPONSE=$(curl -s -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-type: application/json" \
            --data "{\"channel\":\"#stand-up-meeting\", \"text\":\"$SLACK_MESSAGE\"}")

          # Print the response for debugging
          echo "Slack API Response: $RESPONSE"
          
          # Extract the 'ts' from the response using jq
          THREAD_TS=$(echo $RESPONSE | jq -r '.ts')

          # Export the thread timestamp for later steps if needed
          echo "::set-output name=thread_ts::$THREAD_TS"

      - name: Post Follow-Up Message in Thread
        if: success()
        run: |
          THREAD_TS=${{ steps.send_slack.outputs.thread_ts }}
          curl -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-type: application/json" \
            --data "{\"channel\":\"#stand-up-meeting\", \"text\":\"Please post your standup in this thread:-\n\nYesterday Tasks:\nToday Tasks:\nAny Impediments!\", \"thread_ts\":\"${THREAD_TS}\"}"
