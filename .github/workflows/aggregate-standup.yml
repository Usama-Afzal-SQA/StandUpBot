name: Aggregate Standup Reports

on:
  schedule:
    # Runs every weekday (Monday to Friday) at 10:30 AM PST (5:30 AM UTC)
    - cron: '30 5 * * 1-5'
  workflow_dispatch:

jobs:
  aggregate-standups:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI and jq
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          sudo apt-add-repository https://cli.github.com/packages
          sudo apt update
          sudo apt install gh jq -y

      - name: Authenticate GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo $GITHUB_TOKEN | gh auth login --with-token

      - name: Fetch Standup Issues
        run: |
          gh issue list --label standup --state open --limit 10 > standup_issues.txt

      - name: Create Summary Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issue_body="**Standup Summary for $(date +'%Y-%m-%d')**\n\n"
          while read -r line; do
            issue_number=$(echo "$line" | awk '{print $1}')
            issue_title=$(echo "$line" | cut -d' ' -f2-)
            issue_body="$issue_body- [#$issue_number] $issue_title\n"
          done < standup_issues.txt
          
          gh issue create --title "Standup Summary - $(date +'%Y-%m-%d')" --body "$issue_body" --label "standup-summary"

      # Optional: Close Standup Issues After Summarizing
      - name: Close Standup Issues
        if: success()
        run: |
          while read -r line; do
            issue_number=$(echo "$line" | awk '{print $1}')
            gh issue close $issue_number
          done < standup_issues.txt

      # Notify Slack about the created Standup Summary and create a thread
      - name: Send Standup Summary to Slack
        id: send_slack
        run: |
          # Post the standup summary using Slack's Web API and capture the response
          RESPONSE=$(curl -s -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-type: application/json" \
            --data "{\"channel\":\"#stand-up-meeting\", \"text\":\"📝 *Standup Summary for $(date +'%Y-%m-%d')* has been created: ${steps.create_summary_issue.outputs.issue-url}\"}")

          # Log the full response to check for errors
          echo "Slack API Response: $RESPONSE"

          # Extract the 'ts' from the response using jq
          THREAD_TS=$(echo $RESPONSE | jq -r '.ts')

          # Export the thread timestamp for later steps if needed
          echo "::set-output name=thread_ts::$THREAD_TS"

      # Optional: Post Follow-Up Message in Thread
      - name: Post Follow-Up Message in Thread
        if: success()
        run: |
          THREAD_TS=${{ steps.send_slack.outputs.thread_ts }}
          curl -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-type: application/json" \
            --data "{\"channel\":\"#stand-up-meeting\", \"text\":\"Feel free to discuss your updates here!\", \"thread_ts\":\"${THREAD_TS}\"}"
